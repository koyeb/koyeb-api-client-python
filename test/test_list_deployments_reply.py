# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from koyeb.models.list_deployments_reply import ListDeploymentsReply


class TestListDeploymentsReply(unittest.TestCase):
    """ListDeploymentsReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListDeploymentsReply:
        """Test ListDeploymentsReply
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ListDeploymentsReply`
        """
        model = ListDeploymentsReply()
        if include_optional:
            return ListDeploymentsReply(
                deployments = [
                    koyeb.models.deployment_list_item.DeploymentListItem(
                        id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        allocated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        succeeded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        terminated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        organization_id = '', 
                        app_id = '', 
                        service_id = '', 
                        parent_id = '', 
                        child_id = '', 
                        status = 'PENDING', 
                        metadata = koyeb.models.deployment_metadata.DeploymentMetadata(
                            trigger = koyeb.models.trigger_deployment_metadata.TriggerDeploymentMetadata(
                                type = 'UNKNOWN_TYPE', 
                                actor = 'UNKNOWN_ACTOR', 
                                git = koyeb.models.git_deployment_metadata.GitDeploymentMetadata(
                                    provider = 'UNKNOWN', 
                                    repository = '', 
                                    branch = '', 
                                    sha = '', 
                                    message = '', 
                                    sender_username = '', 
                                    sender_avatar_url = '', 
                                    sender_profile_url = '', ), ), 
                            database = koyeb.models.database_deployment_metadata.DatabaseDeploymentMetadata(
                                neon_postgres = koyeb.models.neon_postgres_database_deployment_metadata.NeonPostgresDatabaseDeploymentMetadata(
                                    reset_role_passwords = [
                                        ''
                                        ], ), ), ), 
                        definition = koyeb.models.deployment_definition.DeploymentDefinition(
                            name = '', 
                            routes = [
                                koyeb.models.deployment_route.DeploymentRoute(
                                    port = 56, 
                                    path = '', )
                                ], 
                            ports = [
                                koyeb.models.deployment_port.DeploymentPort(
                                    port = 56, 
                                    protocol = '', )
                                ], 
                            env = [
                                koyeb.models.deployment_env.DeploymentEnv(
                                    scopes = [
                                        ''
                                        ], 
                                    key = '', 
                                    value = '', 
                                    secret = '', )
                                ], 
                            regions = [
                                ''
                                ], 
                            scalings = [
                                koyeb.models.deployment_scaling.DeploymentScaling(
                                    min = 56, 
                                    max = 56, )
                                ], 
                            instance_types = [
                                koyeb.models.deployment_instance_type.DeploymentInstanceType()
                                ], 
                            health_checks = [
                                koyeb.models.deployment_health_check.DeploymentHealthCheck(
                                    grace_period = 56, 
                                    interval = 56, 
                                    restart_limit = 56, 
                                    timeout = 56, 
                                    tcp = koyeb.models.tcp_health_check.TCPHealthCheck(
                                        port = 56, ), 
                                    http = koyeb.models.http_health_check.HTTPHealthCheck(
                                        port = 56, 
                                        path = '', 
                                        method = '', 
                                        headers = [
                                            koyeb.models.http_header.HTTPHeader(
                                                key = '', 
                                                value = '', )
                                            ], ), )
                                ], 
                            skip_cache = True, 
                            docker = koyeb.models.docker_source.DockerSource(
                                image = '', 
                                command = '', 
                                args = [
                                    ''
                                    ], 
                                image_registry_secret = '', 
                                entrypoint = [
                                    ''
                                    ], 
                                privileged = True, ), ), 
                        messages = [
                            ''
                            ], 
                        provisioning_info = koyeb.models.deployment_provisioning_info.DeploymentProvisioningInfo(
                            sha = '', 
                            image = '', 
                            stages = [
                                koyeb.models.deployment_provisioning_info/stage.DeploymentProvisioningInfo.Stage(
                                    name = '', 
                                    started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    build_attempts = [
                                        koyeb.models.deployment_provisioning_info/stage/build_attempt.DeploymentProvisioningInfo.Stage.BuildAttempt(
                                            id = 56, 
                                            started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], )
                                ], ), 
                        database_info = koyeb.models.deployment_database_info.DeploymentDatabaseInfo(), 
                        version = '', 
                        deployment_group = '', )
                    ],
                limit = 56,
                offset = 56,
                count = 56
            )
        else:
            return ListDeploymentsReply(
        )
        """

    def testListDeploymentsReply(self):
        """Test ListDeploymentsReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
