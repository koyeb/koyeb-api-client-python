# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from koyeb.models.deployment_definition import DeploymentDefinition

class TestDeploymentDefinition(unittest.TestCase):
    """DeploymentDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeploymentDefinition:
        """Test DeploymentDefinition
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeploymentDefinition`
        """
        model = DeploymentDefinition()
        if include_optional:
            return DeploymentDefinition(
                name = '',
                type = 'INVALID',
                routes = [
                    koyeb.models.deployment_route.DeploymentRoute(
                        port = 56, 
                        path = '', )
                    ],
                ports = [
                    koyeb.models.deployment_port.DeploymentPort(
                        port = 56, 
                        protocol = '', )
                    ],
                env = [
                    koyeb.models.deployment_env.DeploymentEnv(
                        scopes = [
                            ''
                            ], 
                        key = '', 
                        value = '', 
                        secret = '', )
                    ],
                regions = [
                    ''
                    ],
                scalings = [
                    koyeb.models.deployment_scaling.DeploymentScaling(
                        scopes = [
                            ''
                            ], 
                        min = 56, 
                        max = 56, 
                        targets = [
                            koyeb.models.deployment_scaling_target.DeploymentScalingTarget(
                                average_cpu = koyeb.models.deployment_scaling_target_average_cpu.DeploymentScalingTargetAverageCPU(
                                    value = 56, ), 
                                average_mem = koyeb.models.deployment_scaling_target_average_mem.DeploymentScalingTargetAverageMem(
                                    value = 56, ), 
                                requests_per_second = koyeb.models.deployment_scaling_target_requests_per_second.DeploymentScalingTargetRequestsPerSecond(
                                    value = 56, ), )
                            ], )
                    ],
                instance_types = [
                    koyeb.models.deployment_instance_type.DeploymentInstanceType(
                        scopes = [
                            ''
                            ], 
                        type = '', )
                    ],
                health_checks = [
                    koyeb.models.deployment_health_check.DeploymentHealthCheck(
                        grace_period = 56, 
                        interval = 56, 
                        restart_limit = 56, 
                        timeout = 56, 
                        tcp = koyeb.models.tcp_health_check.TCPHealthCheck(
                            port = 56, ), 
                        http = koyeb.models.http_health_check.HTTPHealthCheck(
                            port = 56, 
                            path = '', 
                            method = '', 
                            headers = [
                                koyeb.models.http_header.HTTPHeader(
                                    key = '', 
                                    value = '', )
                                ], ), )
                    ],
                skip_cache = True,
                docker = koyeb.models.docker_source.DockerSource(
                    image = '', 
                    command = '', 
                    args = [
                        ''
                        ], 
                    image_registry_secret = '', 
                    entrypoint = [
                        ''
                        ], 
                    privileged = True, ),
                git = koyeb.models.git_source.GitSource(
                    repository = '', 
                    branch = '', 
                    tag = '', 
                    sha = '', 
                    build_command = '', 
                    run_command = '', 
                    no_deploy_on_push = True, 
                    workdir = '', 
                    buildpack = koyeb.models.buildpack_builder.BuildpackBuilder(
                        build_command = '', 
                        run_command = '', 
                        privileged = True, ), 
                    docker = koyeb.models.docker_builder.DockerBuilder(
                        dockerfile = '', 
                        entrypoint = [
                            ''
                            ], 
                        command = '', 
                        args = [
                            ''
                            ], 
                        target = '', 
                        privileged = True, ), ),
                database = koyeb.models.database_source.DatabaseSource(
                    neon_postgres = koyeb.models.neon_postgres_database.NeonPostgresDatabase(
                        pg_version = 56, 
                        region = '', 
                        instance_type = '', 
                        roles = [
                            koyeb.models.neon_postgres_database/neon_role.NeonPostgresDatabase.NeonRole(
                                name = '', 
                                secret = '', )
                            ], 
                        databases = [
                            koyeb.models.neon_postgres_database/neon_database.NeonPostgresDatabase.NeonDatabase(
                                name = '', 
                                owner = '', )
                            ], ), )
            )
        else:
            return DeploymentDefinition(
        )
        """

    def testDeploymentDefinition(self):
        """Test DeploymentDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
