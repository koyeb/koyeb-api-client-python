# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from koyeb.models.list_regional_deployments_reply import ListRegionalDeploymentsReply

class TestListRegionalDeploymentsReply(unittest.TestCase):
    """ListRegionalDeploymentsReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListRegionalDeploymentsReply:
        """Test ListRegionalDeploymentsReply
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListRegionalDeploymentsReply`
        """
        model = ListRegionalDeploymentsReply()
        if include_optional:
            return ListRegionalDeploymentsReply(
                regional_deployments = [
                    koyeb.models.regional_deployment_list_item.RegionalDeploymentListItem(
                        id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        region = '', 
                        status = 'PENDING', 
                        messages = [
                            ''
                            ], 
                        definition = koyeb.models.regional_deployment_definition.RegionalDeploymentDefinition(
                            name = '', 
                            type = 'INVALID', 
                            routes = [
                                koyeb.models.route.Route(
                                    port = 56, 
                                    path = '', )
                                ], 
                            ports = [
                                koyeb.models.port.Port(
                                    port = 56, 
                                    protocol = '', )
                                ], 
                            env = [
                                koyeb.models.env.Env(
                                    key = '', 
                                    value = '', 
                                    secret = '', )
                                ], 
                            region = '', 
                            scaling = koyeb.models.scaling.Scaling(
                                min = 56, 
                                max = 56, 
                                targets = [
                                    koyeb.models.deployment_scaling_target.DeploymentScalingTarget(
                                        average_cpu = koyeb.models.deployment_scaling_target_average_cpu.DeploymentScalingTargetAverageCPU(
                                            value = 56, ), 
                                        average_mem = koyeb.models.deployment_scaling_target_average_mem.DeploymentScalingTargetAverageMem(
                                            value = 56, ), 
                                        requests_per_second = koyeb.models.deployment_scaling_target_requests_per_second.DeploymentScalingTargetRequestsPerSecond(
                                            value = 56, ), )
                                    ], ), 
                            instance_type = '', 
                            deployment_group = '', 
                            health_checks = [
                                koyeb.models.deployment_health_check.DeploymentHealthCheck(
                                    grace_period = 56, 
                                    interval = 56, 
                                    restart_limit = 56, 
                                    timeout = 56, 
                                    tcp = koyeb.models.tcp_health_check.TCPHealthCheck(
                                        port = 56, ), 
                                    http = koyeb.models.http_health_check.HTTPHealthCheck(
                                        port = 56, 
                                        path = '', 
                                        method = '', 
                                        headers = [
                                            koyeb.models.http_header.HTTPHeader(
                                                key = '', 
                                                value = '', )
                                            ], ), )
                                ], 
                            skip_cache = True, 
                            use_kuma_v2 = True, 
                            docker = koyeb.models.docker_source.DockerSource(
                                image = '', 
                                command = '', 
                                args = [
                                    ''
                                    ], 
                                image_registry_secret = '', 
                                entrypoint = [
                                    ''
                                    ], 
                                privileged = True, ), 
                            git = koyeb.models.git_source.GitSource(
                                repository = '', 
                                branch = '', 
                                tag = '', 
                                sha = '', 
                                build_command = '', 
                                run_command = '', 
                                no_deploy_on_push = True, 
                                workdir = '', 
                                buildpack = koyeb.models.buildpack_builder.BuildpackBuilder(
                                    build_command = '', 
                                    run_command = '', 
                                    privileged = True, ), ), ), 
                        use_kuma_v2 = True, )
                    ],
                limit = 56,
                offset = 56,
                count = 56
            )
        else:
            return ListRegionalDeploymentsReply(
        )
        """

    def testListRegionalDeploymentsReply(self):
        """Test ListRegionalDeploymentsReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
