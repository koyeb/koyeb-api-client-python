# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from koyeb.models.deployment_health_check import DeploymentHealthCheck
from koyeb.models.docker_source import DockerSource
from koyeb.models.env import Env
from koyeb.models.git_source import GitSource
from koyeb.models.port import Port
from koyeb.models.regional_deployment_definition_type import (
    RegionalDeploymentDefinitionType,
)
from koyeb.models.route import Route
from koyeb.models.scaling import Scaling

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RegionalDeploymentDefinition(BaseModel):
    """
    RegionalDeploymentDefinition
    """  # noqa: E501

    name: Optional[StrictStr] = None
    type: Optional[RegionalDeploymentDefinitionType] = None
    routes: Optional[List[Route]] = None
    ports: Optional[List[Port]] = None
    env: Optional[List[Env]] = None
    region: Optional[StrictStr] = None
    scaling: Optional[Scaling] = None
    instance_type: Optional[StrictStr] = None
    deployment_group: Optional[StrictStr] = None
    health_checks: Optional[List[DeploymentHealthCheck]] = None
    skip_cache: Optional[StrictBool] = None
    docker: Optional[DockerSource] = None
    git: Optional[GitSource] = None
    __properties: ClassVar[List[str]] = [
        "name",
        "type",
        "routes",
        "ports",
        "env",
        "region",
        "scaling",
        "instance_type",
        "deployment_group",
        "health_checks",
        "skip_cache",
        "docker",
        "git",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RegionalDeploymentDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["routes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ports"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env (list)
        _items = []
        if self.env:
            for _item in self.env:
                if _item:
                    _items.append(_item.to_dict())
            _dict["env"] = _items
        # override the default output from pydantic by calling `to_dict()` of scaling
        if self.scaling:
            _dict["scaling"] = self.scaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_checks (list)
        _items = []
        if self.health_checks:
            for _item in self.health_checks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["health_checks"] = _items
        # override the default output from pydantic by calling `to_dict()` of docker
        if self.docker:
            _dict["docker"] = self.docker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict["git"] = self.git.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RegionalDeploymentDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "type": obj.get("type"),
                "routes": [Route.from_dict(_item) for _item in obj.get("routes")]
                if obj.get("routes") is not None
                else None,
                "ports": [Port.from_dict(_item) for _item in obj.get("ports")]
                if obj.get("ports") is not None
                else None,
                "env": [Env.from_dict(_item) for _item in obj.get("env")]
                if obj.get("env") is not None
                else None,
                "region": obj.get("region"),
                "scaling": Scaling.from_dict(obj.get("scaling"))
                if obj.get("scaling") is not None
                else None,
                "instance_type": obj.get("instance_type"),
                "deployment_group": obj.get("deployment_group"),
                "health_checks": [
                    DeploymentHealthCheck.from_dict(_item)
                    for _item in obj.get("health_checks")
                ]
                if obj.get("health_checks") is not None
                else None,
                "skip_cache": obj.get("skip_cache"),
                "docker": DockerSource.from_dict(obj.get("docker"))
                if obj.get("docker") is not None
                else None,
                "git": GitSource.from_dict(obj.get("git"))
                if obj.get("git") is not None
                else None,
            }
        )
        return _obj
